#!/bin/bash

gamename=$2
gameid=$1
steamcmdroot=~/steamcmd
steamcmdexec=steamcmd.sh
appid="${appid:-376030}"
mod_appid="${mod_appid:-346110}"

function usage {
    echo "Usage $0 <gameid> <gamename>"
    exit 1
}

test -n "$gameid" || usage
test -n "$gamename" || usage

gameroot=~/gameservers/$gamename
arkserverroot=$gameroot
logdir=$gameroot/log

if [ ! -d $gameroot ];then
    echo "Game root doesn't exist. $gameroot"
    exit 1
fi

function timestamp() {
  date +%T
}

function doDownloadMod(){
    local modid=$1
    local modsrcdir="$steamcmdroot/steamapps/workshop/content/$mod_appid/$modid"
    local moddldir="$steamcmdroot/steamapps/workshop/downloads/$mod_appid"
    cd "$steamcmdroot"
    retries=10

    while true; do
        echo -n "Downloading mod $modid"
        runSteamCMDspinner +workshop_download_item $mod_appid $modid
        result=$?
        if [ $result -eq 0 ]; then
            break
        else
            echo
            if [ ! -d "$moddldir" ]; then
                echo "Mod $modid download failed"
                break
            fi
            (( retries = retries - 1 ))
            if (( retries <= 0 )); then
                echo "Retries exhausted"
            fi
            echo "Mod $modid not fully downloaded - retrying"
        fi
    done

    if [ -f "$modsrcdir/mod.info" ]; then
        echo "Mod $modid downloaded"
        return 0
    else
        echo "Mod $modid was not successfully downloaded"
        return 1
    fi
}

function runSteamCMDspinner(){
    if [ -n "$verbose" ]; then
        echo
        runSteamCMD "$@"
        return $?
    else
        if [ -z "$progressDisplayType" ]; then
            if stty <&1 >/dev/null 2>&1; then
                progressDisplayType=spinner
            else
                progressDisplayType=dots
            fi
        fi
        runSteamCMD "$@" >/dev/null 2>&1 &
        local scpid=$!
        local pos=0
        local spinner=( '\b-' '\b/' '\b|' '\b\\' )
        if [ "$progressDisplayType" == "dots" ]; then
            spinner=( '.' )
        fi
        echo -n ' ...  '
        while kill -0 $scpid 2>/dev/null; do
            echo -ne "${spinner[$pos]}"
            (( pos = (pos + 1) % ${#spinner[*]} ))
            sleep 0.5
        done
        echo -ne '\b \b'
        wait $scpid
        return $?
    fi
}

function runSteamCMD(){
    echo "$steamcmdroot/$steamcmdexec" +@NoPromptForPassword 1 +login ${steamlogin:-anonymous} "$@" +quit
    "$steamcmdroot/$steamcmdexec" +@NoPromptForPassword 1 +login ${steamlogin:-anonymous} "$@" +quit
}

function get_mod_ids() {
    modids=$(find $gameroot/ShooterGame/Content/Mods -maxdepth 1 -type d -printf "%P\n" | sort | uniq | grep '^[1-9][0-9]*$')
}

function download_all_mods() {
    for modid in $modids;do
        doDownloadMod $modid || return 1
    done
}

function doExtractMod(){
    local modid=$1
    local modsrcdir="$steamcmdroot/steamapps/workshop/content/$mod_appid/$modid"
    local moddestdir="$arkserverroot/ShooterGame/Content/Mods/$modid"
    local modbranch="${mod_branch:-Windows}"

    for varname in "${!mod_branch_@}"; do
        if [ "mod_branch_$modid" == "$varname" ]; then
            modbranch="${!varname}"
        fi
    done

    if [ \( ! -f "$moddestdir/.modbranch" \) ] || [ "$(<"$moddestdir/.modbranch")" != "$modbranch" ]; then
        rm -rf "$moddestdir"
    fi

    if [ -f "$modsrcdir/mod.info" ]; then
        echo "Copying files to $moddestdir"

        if [ -f "$modsrcdir/${modbranch}NoEditor/mod.info" ]; then
            modsrcdir="$modsrcdir/${modbranch}NoEditor"
        fi

        find "$modsrcdir" -type d -printf "$moddestdir/%P\0" | xargs -0 -r mkdir -p

        find "$moddestdir" -type f ! -name '.*' -printf "%P\n" | while read f; do
            if [ \( ! -f "$modsrcdir/$f" \) -a \( ! -f "$modsrcdir/${f}.z" \) ]; then
                rm "$moddestdir/$f"
            fi
        done

        find "$moddestdir" -depth -type d -printf "%P\n" | while read d; do
            if [ ! -d "$modsrcdir/$d" ]; then
                rmdir "$moddestdir/$d"
            fi
        done

        find "$modsrcdir" -type f ! \( -name '*.z' -or -name '*.z.uncompressed_size' \) -printf "%P\n" | while read f; do
            if [ \( ! -f "$moddestdir/$f" \) -o "$modsrcdir/$f" -nt "$moddestdir/$f" ]; then
                printf "%10d  %s  " "`stat -c '%s' "$modsrcdir/$f"`" "$f"
                cp "$modsrcdir/$f" "$moddestdir/$f"
                echo -ne "\r\\033[K"
            fi
        done

        find "$modsrcdir" -type f -name '*.z' -printf "%P\n" | while read f; do
            if [ \( ! -f "$moddestdir/${f%.z}" \) -o "$modsrcdir/$f" -nt "$moddestdir/${f%.z}" ]; then
                printf "%10d  %s  " "`stat -c '%s' "$modsrcdir/$f"`" "${f%.z}"
                perl -M'Compress::Raw::Zlib' -e '
                    my $sig;
                    read(STDIN, $sig, 8) or die "Unable to read compressed file: $!";
                    if ($sig != "\xC1\x83\x2A\x9E\x00\x00\x00\x00"){
                        die "Bad file magic";
                    }
                    my $data;
                    read(STDIN, $data, 24) or die "Unable to read compressed file: $!";
                    my ($chunksizelo, $chunksizehi,
                    $comprtotlo,  $comprtothi,
                    $uncomtotlo,  $uncomtothi)  = unpack("(LLLLLL)<", $data);
                    my @chunks = ();
                    my $comprused = 0;
                    while ($comprused < $comprtotlo) {
                        read(STDIN, $data, 16) or die "Unable to read compressed file: $!";
                        my ($comprsizelo, $comprsizehi,
                        $uncomsizelo, $uncomsizehi) = unpack("(LLLL)<", $data);
                        push @chunks, $comprsizelo;
                        $comprused += $comprsizelo;
                    }
                    foreach my $comprsize (@chunks) {
                        read(STDIN, $data, $comprsize) or die "File read failed: $!";
                        my ($inflate, $status) = new Compress::Raw::Zlib::Inflate();
                        my $output;
                        $status = $inflate->inflate($data, $output, 1);
                        if ($status != Z_STREAM_END) {
                            die "Bad compressed stream; status: " . ($status);
                        }
                        if (length($data) != 0) {
                            die "Unconsumed data in input"
                        }
                        print $output;
                    }
                ' <"$modsrcdir/$f" >"$moddestdir/${f%.z}"
                touch -c -r "$modsrcdir/$f" "$moddestdir/${f%.z}"
                echo -ne "\r\\033[K"
            fi
        done

        perl -e '
            my $data;
            { local $/; $data = <STDIN>; }
            my $mapnamelen = unpack("@0 L<", $data);
            my $mapname = substr($data, 4, $mapnamelen - 1);
            $mapnamelen += 4;
            my $mapfilelen = unpack("@" . ($mapnamelen + 4) . " L<", $data);
            my $mapfile = substr($data, $mapnamelen + 8, $mapfilelen);
            print pack("L< L< L< Z8 L< C L< L<", $ARGV[0], 0, 8, "ModName", 1, 0, 1, $mapfilelen);
            print $mapfile;
            print "\x33\xFF\x22\xFF\x02\x00\x00\x00\x01";
        ' $modid <"$moddestdir/mod.info" >"$moddestdir/.mod"

        if [ -f "$moddestdir/modmeta.info" ]; then
            cat "$moddestdir/modmeta.info" >>"$moddestdir/.mod"
        else
            echo -ne '\x01\x00\x00\x00\x08\x00\x00\x00ModType\x00\x02\x00\x00\x001\x00' >>"$moddestdir/.mod"
        fi

        echo "$modbranch" >"$moddestdir/.modbranch"
    fi
}

#
# Downloads mod and installs it into mods directory
#
function doInstallMod(){
    local modid=$1

    if [ -f "$steamcmdroot/steamapps/workshop/appworkshop_${mod_appid}.acf" ]; then
        sed -i "/^\\t\\t\"${modid}\"/,/^\\t\\t}/d" "$steamcmdroot/steamapps/workshop/appworkshop_${mod_appid}.acf"
    fi

    if doDownloadMod $modid; then
        doExtractMod $modid
        echo "Mod $modid installed"
    fi
}

isModUpdateNeeded(){
  local modid=$1
  local modsrcdir="$steamcmdroot/steamapps/workshop/content/$mod_appid/$modid"
  local moddestdir="$arkserverroot/ShooterGame/Content/Mods/$modid"
  local modbranch="${mod_branch:-Windows}"

  for varname in "${!mod_branch_@}"; do
    if [ "mod_branch_$modid" == "$varname" ]; then
      modbranch="${!varname}"
    fi
  done

  if [ \( ! -f "$moddestdir/.modbranch" \) ] || [ "$(<"$moddestdir/.modbranch")" != "$modbranch" ]; then
    return 0
  fi

  if [ -f "$modsrcdir/mod.info" ]; then
    if [ -f "$modsrcdir/${modbranch}NoEditor/mod.info" ]; then
      modsrcdir="$modsrcdir/${modbranch}NoEditor"
    fi

    while read f; do
      if [ \( ! -f "$moddestdir/${f%.z}" \) -o "$modsrcdir/$f" -nt "$moddestdir/${f%.z}" ]; then
        return 0
      fi
    done < <(find "$modsrcdir" -type f ! -name "*.z.uncompressed_size" -printf "%P\n")
  fi

  return 1
}

function update_all_mods() {
    for modid in $modids; do
        if isModUpdateNeeded $modid; then
            echo "Updating mod $modid"
            doExtractMod $modid
            echo "`timestamp`: Mod $modid updated" >> "$logdir/update.log"
        fi
    done
}

get_mod_ids
download_all_mods
update_all_mods

